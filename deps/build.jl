using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "sdpa_gmp", :sdpa_gmp),
    ExecutableProduct(prefix, "sdpa_qd", :sdpa_qd),
    ExecutableProduct(prefix, "sdpa_dd", :sdpa_dd),
    LibraryProduct(prefix, ["libqd"], :libqd),
]

# Download binaries from hosted location
bin_prefix_sdpa = "https://github.com/ericphanson/SDPA_GMP_Builder/releases/download/v7.1.2"
bin_prefix_qd = "https://github.com/ericphanson/QD_Builder/releases/download/v2.3.22"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    MacOS(:x86_64) => ("$bin_prefix_sdpa/SDPA_GMP-QD-DD_Builder.v7.1.2.x86_64-apple-darwin14.tar.gz", "4c066054ecbf1d4c21776d8d5be7e39ba8c910eac9cdb50c13fb174293c77317"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix_sdpa/SDPA_GMP-QD-DD_Builder.v7.1.2.x86_64-linux-gnu.tar.gz", "00797cc2bfa48539efe98bbe8f6b1748ad0f97a276a75947174fb689a51c85ac"),
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix_qd/QD.v2.3.22.aarch64-linux-gnu.tar.gz", "6d9bddda83e81dfcdbab058cfa66ca3c632b142d17296780f0e8d8fa90e49ea4"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix_qd/QD.v2.3.22.aarch64-linux-musl.tar.gz", "7b0fe880d3cfcac5ac68c3c50f95d6e1a9b43dfdb3d5ab4b9618ae40455279a5"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix_qd/QD.v2.3.22.arm-linux-gnueabihf.tar.gz", "12a4ffd77457b044f6a8c60dd1d012e83893362a92da49b0a1f6bc861ef6a493"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix_qd/QD.v2.3.22.arm-linux-musleabihf.tar.gz", "0f30c06dea57dd3512682b6e3d0f6ae9795b6b4f1f52370836d224b8f3e3c4b1"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix_qd/QD.v2.3.22.i686-linux-gnu.tar.gz", "6e18c5c84356291102928c6e270fa2b14e3a8de60ea473b382ee799efbabe82f"),
    Linux(:i686, libc=:musl) => ("$bin_prefix_qd/QD.v2.3.22.i686-linux-musl.tar.gz", "1290218fdce9afa5e75428b7af6fa56a65b3a23b08e2e9f85925bc44bd307ce2"),
    MacOS(:x86_64) => ("$bin_prefix_qd/QD.v2.3.22.x86_64-apple-darwin14.tar.gz", "513ab1c220e30c0e9e82e2049c1e66aa128432072c244ffd1011c4bc7259f3ad"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix_qd/QD.v2.3.22.x86_64-linux-gnu.tar.gz", "f4947898a63a43e899ff10e96fa97a47fb9197c33a856615ae4af9a84a4c0726"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix_qd/QD.v2.3.22.x86_64-linux-musl.tar.gz", "d85586dfa07eaf0186ad5e4e94299a8dcbce83856b37c6f221b710fd3f4e0e8a"),
)

custom_library = false
HAS_WSL = false

# if the user sets the environmental variable, we take that as the path
# and don't do any downloads or OS checks.
if haskey(ENV,"JULIA_SDPA_GMP_PATH")
    custom_library = true
    custom_products = [ExecutableProduct(ENV["JULIA_SDPA_GMP_PATH"], "sdpa_gmp", :sdpa_gmp) ]
    if haskey(ENV,"JULIA_SDPA_GMP_WSL")
        if uppercase(ENV["JULIA_SDPA_GMP_WSL"]) == "TRUE"
            HAS_WSL = true
        end
    end
end

# try to detect if we are *within* WSL
# https://github.com/microsoft/WSL/issues/423#issuecomment-221627364
if Sys.islinux() && occursin("WSL", read(`cat /proc/version`, String))
    install_wsl_binary = true
else
    install_wsl_binary = false
end

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose = verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied && !custom_library
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    if Sys.iswindows()
        # try to see is `sdpa_gmp` is installed on WSL
        if !isempty(Sys.which("wsl"))
            @info "Windows subsystem for Linux detected. Using WSL-compiled binary."
            install_wsl_binary = true            
            HAS_WSL = true

        else
            @info "SDPA-GMP does not directly support Windows, and requires Windows Subsystem for Linux (WSL). "
            error("WSL was not detected.")
        end
    else
        error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by BinaryBuilder for this package! That means you need to install `sdpa_gmp` yourself, and put it on the PATH so this package can find it.")
    end

end

# we install WSL binary if we are on Windows and WSL is available, or if we are within WSL itself already.
if install_wsl_binary
    prefix = Prefix(joinpath(prefix, "bin"))
    BinaryProvider.download_verify("https://github.com/ericphanson/SDPA_GMP_Builder/raw/master/deps/sdpa_gmp_wsl",  # url
            "f8ed0c3f2aefa1ab5a90f1999c78548625f6122f969972b8a51b54a0017b3a59", # hash
            joinpath(prefix.path,"sdpa_gmp");  # destination
            verbose=verbose)

    products = [
        FileProduct(prefix, "sdpa_gmp", :sdpa_gmp),
    ]
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if  dl_info !== nothing && !custom_library && (unsatisfied || !isinstalled(dl_info...; prefix = prefix)) 
    # Download and install binaries
    install(dl_info...; prefix = prefix, force = true, verbose = verbose, ignore_platform = HAS_WSL)
end

# Write out a deps.jl file that will contain mappings for our products
deps_file_path = joinpath(@__DIR__, "deps.jl")

write_deps_file(deps_file_path, products, verbose = verbose)

# add WSL info
open(deps_file_path, "a") do io
    write(io, """

    const HAS_WSL = $HAS_WSL
    if HAS_WSL
        const sdpa_dd = ""
        const sdpa_qd = ""
    end
    """)
end
