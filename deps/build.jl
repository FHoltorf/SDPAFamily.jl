using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "sdpa_gmp", :sdpa_gmp),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/ericphanson/SDPA_GMP_Builder/releases/download/v7.1.3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(MacOS(:x86_64) => ("$bin_prefix/SDPA_GMP_Builder.v7.1.3.x86_64-apple-darwin14.tar.gz", "bc6db904c1b08c8a8f82ad950ba423e9a981884e48ee335a1f5761f57bc6698b"),
    Linux(:x86_64, libc = :glibc) => ("$bin_prefix/SDPA_GMP_Builder.v7.1.3.x86_64-linux-gnu.tar.gz", "7c5d28a24940a3ca62865c6ace81856855f1abc8fbf0929339300e41c969ca36"),
)

custom_library = false
has_WSL = false

# if the user sets the environmental variable, we take that as the path
# and don't do any downloads or OS checks.
if haskey(ENV,"JULIA_SDPA_GMP_PATH")
    custom_library = true
    custom_products = [ExecutableProduct(ENV["JULIA_SDPA_GMP_PATH"], "sdpa_gmp", :sdpa_gmp) ]
    if haskey(ENV,"JULIA_SDPA_GMP_WSL")
        if uppercase(ENV["JULIA_SDPA_GMP_WSL"]) == "TRUE"
            has_WSL = true
        end
    end
end

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose = verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied && !custom_library
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    if Sys.iswindows()
        # try to see is `sdpa_gmp` is installed on WSL
        if !isempty(Sys.which("wsl"))
            @info "Windows subsystem for Linux detected. Using WSL-compiled binary."
            
            
            prefix = Prefix(joinpath(prefix, "bin"))
            BinaryProvider.download_verify("https://github.com/ericphanson/SDPA_GMP_Builder/raw/master/deps/sdpa_gmp_wsl",  # url
                    "f8ed0c3f2aefa1ab5a90f1999c78548625f6122f969972b8a51b54a0017b3a59", # hash
                    joinpath(prefix.path,"sdpa_gmp");  # destination
                    verbose=verbose)

            products = [
                FileProduct(prefix, "sdpa_gmp", :sdpa_gmp),
            ]
            has_WSL = true

        else
            @info "SDPA-GMP does not directly support Windows, and requires Windows Subsystem for Linux (WSL). "
            error("WSL was not detected.")
        end
    else
        error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by BinaryBuilder for this package! That means you need to install `sdpa_gmp` yourself, and put it on the PATH so this package can find it.")
    end

end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if  dl_info !== nothing && !custom_library && (unsatisfied || !isinstalled(dl_info...; prefix = prefix)) 
    # Download and install binaries
    install(dl_info...; prefix = prefix, force = true, verbose = verbose, ignore_platform = has_WSL)
end

# Write out a deps.jl file that will contain mappings for our products
deps_file_path = joinpath(@__DIR__, "deps.jl")

write_deps_file(deps_file_path, products, verbose = verbose)

# add WSL info
open(deps_file_path, "a") do io
    write(io, """

    const has_WSL = $has_WSL
    """)
end
